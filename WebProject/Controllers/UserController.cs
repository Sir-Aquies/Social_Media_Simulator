#nullable disable
using Microsoft.AspNetCore.Mvc;
using WebProject.Models;
using WebProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;

namespace WebProject.Controllers
{
	[Authorize]
	public class UserController : Controller
	{
		private readonly WebProjectContext _Models;
		private readonly ILogger<UserController> _Logger;
		private readonly UserManager<UserModel> userManager;

		public UserController(WebProjectContext Models, UserManager<UserModel> manager, ILogger<UserController> logger)
		{
			_Models = Models;
			userManager = manager;
			_Logger = logger;
		}

		//TODO - delete bootstrap
		//TODO - seed the database with APIs, one for users, another for post and comments.
		//This social media project is good but lack the 'social' part, for that it needs algorithm that mimic a real one.
		//Initially seed the databse with 25 users if the databse is empty.
		//After the databse is seeded create more users every each minute.
		//For post, select random autogenerated users and add post to their posts list every 10 seconds.
		//For comments do the same thing selecting random post.
		//When it comes to likes, make an algorithm that will select a random post and add users to the userlikes property (the same for comments) every second.
		//With the likes algorithm then create a tendency page with the most likes and commented post.

		//TODO - finnish learning angular and add it to this project and make the respective improvements.
		public async Task<IActionResult> SearchUser(string UserName)
		{
			UserModel userModel = await userManager.GetUserAsync(HttpContext.User);

			if (!string.IsNullOrEmpty(UserName))
			{
				return RedirectToAction("UserPage", new { UserName });
			}

			return RedirectToAction("UserPage", new { userModel.UserName });
		}
		
		public async Task<IActionResult> UserPage(string UserName)
		{
			UserModel user = await userManager.GetUserAsync(HttpContext.User);

			if (user == null)
			{
				return RedirectToAction("Login", "Account");
			}

			UserModel pageUser = new();

			if (!string.IsNullOrEmpty(UserName) && user.UserName != UserName)
			{
				pageUser = await userManager.FindByNameAsync(UserName);

				if (pageUser != null)
				{
					pageUser = await GetPosts(pageUser);
				}
				else
				{
					//TODO - set up a user not found view.
					return NotFound();
				}

			}
			else
			{
				pageUser = await GetPosts(user);
			}

			user.LikedPost = new List<PostModel>();

			foreach(PostModel p in pageUser.Posts)
			{
				foreach (UserModel u in p.UsersLikes)
				{
					if (u.Id == user.Id)
					{
						user.LikedPost.Add(p);
					}
				}
			}

			user.LikedComments = new List<CommentModel>();

			foreach (PostModel p in pageUser.Posts)
			{
				foreach (CommentModel c in p.Comments)
				{
					foreach (UserModel u in c.UsersLikes)
					{
						if (u.Id == user.Id)
						{
							user.LikedComments.Add(c);
						}
					}
				}
			}

			DynamicUser dynamic = new()
			{
				User = user,
				PageUser = pageUser
			};

			if (TempData["ErrorMessage"] != null)
			{
				ViewBag.ErrorMessage = TempData["ErrorMessage"].ToString();
			}

			if (TempData["Message"] != null)
			{
				ViewBag.Message = TempData["Message"].ToString();
			}

			return View(dynamic);
		}

		private async Task<UserModel> GetPosts(UserModel user)
		{
			user.Posts = new List<PostModel>();

			foreach (PostModel p in _Models.Posts.AsNoTracking())
			{
				PostModel post = p;

				if (post.UserId == user.Id)
				{
					post = await _Models.Posts.Include(p => p.UsersLikes).AsNoTracking().FirstOrDefaultAsync(p => p.Id == post.Id);
					post.User = user;
					post = await LoadComments(post);
					user.Posts.Add(post);
				}
			}

			return user;
		}

		private async Task<PostModel> LoadComments(PostModel post)
		{
			post.Comments = new List<CommentModel>();

			foreach (CommentModel c in _Models.Comments.AsNoTracking())
			{
				CommentModel comment = c;

				if (comment.PostId == post.Id)
				{
					comment = await _Models.Comments.Include(c => c.User).Include(c => c.UsersLikes).FirstOrDefaultAsync(c => c.Id == comment.Id);
					comment.Post = post;
					post.Comments.Add(comment);
				}
			}

			return post;
		}

		public async Task<IActionResult> AllUsers()
		{
			UserModel userModel = await userManager.GetUserAsync(HttpContext.User);

			return View(userModel);
		}
	}
}
