#nullable disable
using Microsoft.AspNetCore.Mvc;
using WebProject.Models;
using WebProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.FileProviders;
using Microsoft.AspNetCore.Authorization;
using System.Net.Http;
using static System.Net.WebRequestMethods;

namespace WebProject.Controllers
{
	[Authorize]
	public class UserController : Controller
	{
		private readonly WebProjectContext _Models;
		private readonly ILogger<UserController> _Logger;
		private readonly UserManager<UserModel> userManager;

		public UserController(WebProjectContext Models, UserManager<UserModel> manager, ILogger<UserController> logger)
		{
			_Models = Models;
			userManager = manager;
			_Logger = logger;
		}

		//TODO - delete bootstrap
        //TODO - seed the database with APIs, one for users, another for post and comments.
        //This social media project is good but lack the 'social' part, for that it needs algorithm that mimic a real one.
        //Initially seed the databse with 25 users if the databse is empty.
        //After the databse is seeded create more users every each minute.
        //For post, select random autogenerated users and add post to their posts list every 10 seconds.
        //For comments do the same thing selecting random post.
        //When it comes to likes, make an algorithm that will select a random post and add users to the userlikes property (the same for comments) every second.
        //With the likes algorithm then create a tendency page with the most likes and commented post.

        //TODO - make the userinfo scrool with the page in userpage.

        //TODO - finnish learning angular and add it to this project and make the respective improvements.
        public async Task<IActionResult> SearchUser(string UserName)
		{
			UserModel userModel = await userManager.GetUserAsync(HttpContext.User);

			if (!string.IsNullOrEmpty(UserName))
			{
				return RedirectToAction("UserPage", new { UserName });
			}

			return RedirectToAction("UserPage", new { userModel.UserName });
		}

		public async Task<IActionResult> UserPage(string UserName)
		{
			UserModel userModel = await userManager.GetUserAsync(HttpContext.User);

			userModel.LikedPost = await (from post in _Models.Posts where post.UsersLikes.Contains(userModel) select post).AsNoTracking().ToListAsync();
			userModel.LikedComments = await (from com in _Models.Comments where com.UsersLikes.Contains(userModel) select com).AsNoTracking().ToListAsync();

			if (userModel == null)
			{
				return RedirectToAction("Login", "Account");
			}

			UserModel page = new();

			if (!string.IsNullOrEmpty(UserName))
			{
				page = await userManager.FindByNameAsync(UserName);

				if (page != null)
				{
					page.Posts = await _Models.Posts.Include(p => p.Comments).ThenInclude(c => c.User).Where(p => p.UserId == page.Id).AsNoTracking().ToListAsync();
					foreach (var post in page.Posts)
					{
						post.User = page;
					}
				}
				else
				{
					//TODO - set up a user not found view.
					return NotFound();
				}

			}
			else
			{
				page = userModel;
				page.Posts = await _Models.Posts.Include(p => p.Comments).ThenInclude(c => c.User).Where(p => p.UserId == page.Id).AsNoTracking().ToListAsync();
				foreach (var post in page.Posts)
				{
					post.User = page;
				}
			}

			DynamicUser dynamic = new()
			{
				User = userModel,
				PageUser = page
			};

			if (TempData["ErrorMessage"] != null)
			{
				ViewBag.ErrorMessage = TempData["ErrorMessage"].ToString();
			}

			if (TempData["Message"] != null)
			{
				ViewBag.Message = TempData["Message"].ToString();
			}

			return View(dynamic);
		}

		public async Task<IActionResult> AllUsers()
		{
			UserModel userModel = await userManager.GetUserAsync(HttpContext.User);

			return View(userModel);
		}
	}
}
